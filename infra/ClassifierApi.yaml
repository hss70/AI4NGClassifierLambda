AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AI4NG Classifier Lambda API

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: dotnet8

  Api:
    Name: AI4NG-dev
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  # CloudWatch Log Group for API Gateway Access Logs
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/http-api/${AI4NGHttpApi}-access-logs
      RetentionInDays: 14

  # Resource policy to allow API Gateway to write to the log group
  ApiGatewayLogsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub ${AI4NGHttpApi}-ApiGatewayLogsPolicy
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "${ApiAccessLogGroup.Arn}"
            }
          ]
        }

  # API Gateway (HTTP API)
  AI4NGHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub AI4NG-${Environment}
      StageName: dev
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50
      AccessLogSettings:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","endpoint":"$context.routeKey","userId":"$context.authorizer.claims.username","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","status":"$context.status","responseLength":"$context.responseLength","error":"$context.error.message","integrationError":"$context.integration.error"}'

  # Explicit Authorizer resource
  AI4NGCognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref AI4NGHttpApi
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - 517s6c84jo5i3lqste5idb0o4c
        Issuer: https://cognito-idp.eu-west-2.amazonaws.com/eu-west-2_EaNz6cSp0
      Name: AI4NGCognitoAuthorizer

  # Lambda Function
  ClassifierApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: AI4NGClassifierLambda::AI4NGClassifierLambda.LambdaEntryPoint::FunctionHandlerAsync
      CodeUri: ../src/AI4NGClassifierLambda
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: FBCSPClassifierParameters
        - DynamoDBReadPolicy:
            TableName: EEGProcessingStatus
        - DynamoDBReadPolicy:
            TableName: FBCSPSessionFiles
        - S3ReadPolicy:
            BucketName: !Sub ai4ng-eeg-results-${Environment}-${AWS::AccountId}-${AWS::Region}
      Environment:
        Variables:
          CLASSIFIER_TABLE: FBCSPClassifierParameters
          STATUS_TABLE: EEGProcessingStatus
          FILE_TABLE: FBCSPSessionFiles
          RESULTS_BUCKET: !Sub ai4ng-eeg-results-${Environment}-${AWS::AccountId}-${AWS::Region}
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: INFO
        SystemLogLevel: INFO

  # Lambda Integration
  ClassifierIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AI4NGHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ClassifierApi.Arn}/invocations
      PayloadFormatVersion: "2.0"
      IntegrationMethod: POST

  # Routes (manually defined to attach Authorizer)
  GetClassifiersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetClassifierByIdRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/{classifierId}
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphsForClassifierRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/{classifierId}/graphs
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetClassifierBySessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/session/{sessionId}
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphsForSessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/session/{sessionId}/graphs
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphDataForSessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/session/{sessionId}/graphdata
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphNamesForSessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/session/{sessionId}/graphnames
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphByNameForSessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/session/{sessionId}/graphs/{graphName}
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphDataByNameForSessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/session/{sessionId}/graphdata/{graphName}
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  # Lambda Invoke permission
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ClassifierApi
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AI4NGHttpApi}/*/*

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${AI4NGHttpApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
  SharedApiId:
    Value: !Ref AI4NGHttpApi
    Export:
      Name: !Sub SharedApiId-${Environment}
  SharedApiAuthorizerId:
    Value: !Ref AI4NGCognitoAuthorizer
    Export:
      Name: !Sub SharedApiAuthorizerId-${Environment}
  ResultsBucketName:
    Value: !Sub ai4ng-eeg-results-${Environment}-${AWS::AccountId}-${AWS::Region}
    Export:
      Name: !Sub EEGResultsBucketName-${Environment}
