AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AI4NG Classifier Lambda API

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: dotnet8

  Api:
    Name: AI4NG-dev
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:

  # CloudWatch Log Group for API Gateway Access Logs
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/http-api/${AI4NGHttpApi}-access-logs"
      RetentionInDays: 14

  # Resource policy to allow API Gateway to write to the log group
  ApiGatewayLogsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${AI4NGHttpApi}-ApiGatewayLogsPolicy"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "logs:PutLogEvents",
              "Resource": "${ApiAccessLogGroup.Arn}"
            }
          ]
        }


  # API Gateway (HTTP API)
  AI4NGHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: AI4NG-dev
      StageName: dev
      AccessLogSettings:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: |
          {
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "caller": "$context.identity.caller",
            "user": "$context.identity.user",
            "requestTime": "$context.requestTime",
            "httpMethod": "$context.httpMethod",
            "resourcePath": "$context.routeKey",
            "status": "$context.status",
            "protocol": "$context.protocol",
            "responseLength": "$context.responseLength",
            "headers": "$input.params().header"
          }

  # Explicit Authorizer resource
  AI4NGCognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref AI4NGHttpApi
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Audience:
          - 517s6c84jo5i3lqste5idb0o4c
        Issuer: https://cognito-idp.eu-west-2.amazonaws.com/eu-west-2_EaNz6cSp0
      Name: AI4NGCognitoAuthorizer

  # Lambda Function
  ClassifierApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: AI4NGClassifierLambda::AI4NGClassifierLambda.LambdaEntryPoint::FunctionHandlerAsync
      CodeUri: ../src/AI4NGClassifierLambda
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaDynamoDBExecutionRole
      Environment:
        Variables:
          TABLE_NAME: classifiers

  # Lambda Integration
  ClassifierIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AI4NGHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ClassifierApi.Arn}/invocations
      PayloadFormatVersion: '2.0'
      IntegrationMethod: POST

  # Routes (manually defined to attach Authorizer)
  GetClassifiersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetClassifierByIdRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/{classifierId}
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphsForClassifierRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/{classifierId}/graphs
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  GetGraphByNameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AI4NGHttpApi
      RouteKey: GET /api/classifiers/{classifierId}/graphs/{graphName}
      AuthorizationType: JWT
      AuthorizerId: !Ref AI4NGCognitoAuthorizer
      Target: !Sub integrations/${ClassifierIntegration}

  # Lambda Invoke permission
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ClassifierApi
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AI4NGHttpApi}/*/*

  # DynamoDB Table
  ClassifiersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: classifiers
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${AI4NGHttpApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  SharedApiId:
    Value: !Ref AI4NGHttpApi
    Export:
      Name: SharedApiId
  SharedApiAuthorizerId:
    Value: !Ref AI4NGCognitoAuthorizer
    Export:
      Name: SharedApiAuthorizerId
